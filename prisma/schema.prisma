datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // custom fields
  role    Role      @default(USER)
  Comment Comment[]
  blogs   Blog[]    @relation("AuthoredBlogs")
  Reply   Reply[]
  Like    Like[]
}

enum Role {
  USER
  WRITER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]
}

model Blog {
  id            String  @id @default(cuid())
  title         String
  slug          String  @unique
  description   String
  image         String
  content       String
  published     Boolean
  likes         Int     @default(0)
  commentsCount Int     @default(0)
  views         Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation("AuthoredBlogs", fields: [authorId], references: [id])
  authorId String

  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  Comment    Comment[]
  Like       Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  blogId     String
  blog       Blog    @relation(fields: [blogId], references: [id])
  replyCount Int     @default(0)
  Reply      Reply[]
}

model Reply {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}

model Like {
  id   String @id @default(uuid())
  user User   @relation(fields: [userId], references: [id])
  blog Blog   @relation(fields: [blogId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  blogId String
}
